using System.Collections.Generic;
using UnityEngine;

public class PoolManager
{
    //??? Pool?? ?????? ?????. ?? Pool???? ?????? Poolable Object?? ????? ?????? ?????? ???????? Pool?? ???? ??????? ????????????.
    private readonly Dictionary<string, Pool> _pool = new();
    private Transform _root;

    public void Init()
    {
        //??? Pool Object?? ???? ??????? ??@Pool_Root???? ?????? ???????.
        if (_root == null)
        {
            _root = new GameObject { name = "@Pool_Root" }.transform;
            Object.DontDestroyOnLoad(_root);
        }
    }

    //Pool????? ?? ?? Object?? ??? ?????? ??????? Pool?? ??? ??????.
    public void Push(Poolable poolable, float time)
    {
        //??? ?????? ?????? Pool?? ????????? ???. ???????? ???? ??? Poolable 	Object?? ????? ??????? ??? ????????? ???????.
        var name = poolable.gameObject.name;
        if (_pool.ContainsKey(name) == false)
        {
            Managers.Resource.Destroy(poolable.gameObject, time);
            return;
        }

        //Pool?? ?????? ??? ??? pool?? ???????.
        _pool[name].Push(poolable);
    }

    //??? ?????? ?????? ????????? pool???? ??????.
    public Poolable Pop(GameObject original, Transform parent = null)
    {
        //?????? ????? pool?? ???????? ???? ??? pool?? ????
        if (_pool.ContainsKey(original.name) == false)
            CreatePool(original);
        //??? pool?? Object?? ??????.
        return _pool[original.name].Pop(parent);
    }

    //?????? ?????? pool?? ???????.
    public void CreatePool(GameObject original, int count = 1)
    {
        //pool ????? ??????? ??? ?????? ???? ?????? ???? pool?? ???????.
        var pool = new Pool();
        pool.Init(original, count);
        pool.Root.SetParent(_root);
        //??? ??? pool?? _pool ??????? ???
        _pool.Add(original.name, pool);
    }

    //??? ??? ?????? ????????.
    public GameObject GetOriginal(string name)
    {
        if (_pool.ContainsKey(name) == false)
            return null;
        return _pool[name].Original;
    }

    //??? pool?? ??????? ???????.
    public void Clear()
    {
        foreach (Transform child in _root) Managers.Resource.Destroy(child.gameObject);
        _pool.Clear();
    }

    #region Pool

    private class Pool
    {
        //Poolable Object?? ??????? poolStack. stack?? ???? queue?? ?????? ???.
        private readonly Queue<Poolable> _poolQueue = new();

        //???? ???????
        public GameObject Original { get; private set; }

        //??????? ? ?????? Root Object
        public Transform Root { get; set; }

        //original Object?? Pooling?? Pool?? ???????? ???? ??? Pool?? ???????.
        public void Init(GameObject original, int count = 2)
        {
            Original = original;
            Root = new GameObject().transform;
            Root.name = $"{Original.name}_Root";
            for (var i = 0; i < count; i++)
                Push(Create());
        }

        //Pool?? ?????? Poolable Object?? ???????.
        private Poolable Create()
        {
            var go = Object.Instantiate(Original);
            go.name = Original.name;
            return go.GetOrAddComponent<Poolable>();
        }

        //?????? Poolable Object?? pool?? ??????. 
        public void Push(Poolable poolable)
        {
            //object?? ???????? ???? ?? ??????? ?????.
            if (poolable == null)
                return;
            //pool?????? ??? Object?? ???????????? ??????, ????????? ?????? ?????? ????????.
            poolable.transform.SetParent(Root);
            poolable.gameObject.SetActive(false);
            poolable.isUsing = false;
            //poolStack?? ????
            _poolQueue.Enqueue(poolable);
        }

        //pool?? ????? ????????? ????????.
        public Poolable Pop(Transform parent)
        {
            Poolable poolable = null;
            //pool?? ??????? Poolable Object?? ????? ??????. ???? ??? ???? ????.
            while (_poolQueue.Count > 0)
            {
                poolable = _poolQueue.Dequeue();
                if (poolable.gameObject.activeSelf == false)
                    break;
            }

            //pool?? ??????? Object?? ????? ?????? ???? ???? ??????? ????????.
            if (poolable == null || poolable.gameObject.activeSelf)
                poolable = Create();
            poolable.gameObject.SetActive(true);
            //???? ????????? ??????? ???? ??? Scene ????? ??????.
            if (parent == null)
                poolable.transform.SetParent(Managers.Scene.CurrentScene.transform);

            poolable.transform.SetParent(parent);
            poolable.isUsing = true;
            return poolable;
        }
    }

    #endregion
}